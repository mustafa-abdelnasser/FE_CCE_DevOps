---
replicas: 1

# Allows you to add any config files in /usr/share/logstash/config/
# such as logstash.yml and log4j2.properties
#
# Note that when overriding logstash.yml, `http.host: 0.0.0.0` should always be included
# to make default probes work.
logstashConfig:
  # logstash.yml: |
  #   http:
  #     host: "0.0.0.0"
  #   path:
  #     config: /usr/share/logstash/pipeline
#  logstash.yml: |
#    key:
#      nestedkey: value
#  log4j2.properties: |
#    key = value

# Allows you to add any pipeline files in /usr/share/logstash/pipeline/
### ***warn*** there is a hardcoded logstash.conf in the image, override it first
logstashPipeline: 
  logstash.conf: |
    # input will come from filebeat
    input {
      beats {
        port => 5044
      }
    }

    filter {
    }

    output {
      elasticsearch {
          hosts => ["https://90.84.19.224:9200"]
          index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
          ssl => true
          ssl_certificate_verification => false
          user => "${ES_USER}"
          password => "${ES_PASSWORD}"
          cacert => '/usr/share/logstash/es.crt'
      }
    }
    
#  logstash.conf: |
#    input {
#      exec {
#        command => "uptime"
#        interval => 30
#      }
#    }
#    output { stdout { } }

# Allows you to add any pattern files in your custom pattern dir
logstashPatternDir: "/usr/share/logstash/patterns/"
logstashPattern: {}
#    pattern.conf: |
#      DPKG_VERSION [-+~<>\.0-9a-zA-Z]+

# Extra environment variables to append to this nodeGroup
# This will be appended to the current 'env:' key. You can use any of the kubernetes env
# syntax here
extraEnvs: []
#  - name: MY_ENVIRONMENT_VAR
#    value: the_value_goes_here

# Allows you to load environment variables from kubernetes secret or config map
envFrom:
  - secretRef:
      name: logstash-logstash-env
# - secretRef:
#     name: env-secret
# - configMapRef:
#     name: config-map

# Add sensitive data to k8s secrets
secrets:
 - name: "elastic-cert"
   value:
     es.crt: Q2VydGlmaWNhdGU6CiAgICBEYXRhOgogICAgICAgIFZlcnNpb246IDMgKDB4MikKICAgICAgICBTZXJpYWwgTnVtYmVyOiAxICgweDEpCiAgICBTaWduYXR1cmUgQWxnb3JpdGhtOiBzaGEyNTZXaXRoUlNBRW5jcnlwdGlvbgogICAgICAgIElzc3VlcjogQz1DTiwgTz1IdWF3ZWkgQ2xvdWQsIE9VPUNsb3VkIFNlYXJjaCBTZXJ2aWNlLCBDTj1DbG91ZCBTZWFyY2ggU2VydmljZSBSb290IENBCiAgICAgICAgVmFsaWRpdHkKICAgICAgICAgICAgTm90IEJlZm9yZTogTWFyICA2IDA4OjMxOjAxIDIwMTkgR01UCiAgICAgICAgICAgIE5vdCBBZnRlciA6IE1hciAgNSAwODozMTowMSAyMDQ5IEdNVAogICAgICAgIFN1YmplY3Q6IEM9Q04sIE89SHVhd2VpIENsb3VkLCBPVT1DbG91ZCBTZWFyY2ggU2VydmljZSwgQ049Q2xvdWQgU2VhcmNoIFNlcnZpY2UgUm9vdCBDQQogICAgICAgIFN1YmplY3QgUHVibGljIEtleSBJbmZvOgogICAgICAgICAgICBQdWJsaWMgS2V5IEFsZ29yaXRobTogcnNhRW5jcnlwdGlvbgogICAgICAgICAgICAgICAgUHVibGljLUtleTogKDIwNDggYml0KQogICAgICAgICAgICAgICAgTW9kdWx1czoKICAgICAgICAgICAgICAgICAgICAwMDpkYzozZTpjNTplYTo2YzplODo3ZDoxYzphZTo3YjpkOTpjZTozOTo1MzoKICAgICAgICAgICAgICAgICAgICBkZDpkOTphNzoxMjo4NzplZDpiODozYjo2NjpiODo5ZTowOTpmMTpmNjoxNjoKICAgICAgICAgICAgICAgICAgICA4NzpmODpjZjpkNDo3ZTo2NTo1YTpmOTowYjpmMTo4NDozMTo3NDpiMTpjNzoKICAgICAgICAgICAgICAgICAgICAyNjphYTo3NjozODpiMDoyZjowOTphYjpkNzpiYzpkZTpjZjoyNTo3Njo2OToKICAgICAgICAgICAgICAgICAgICBmZTo4ZjowYToxNzpmNzpiNzoyMjoyOTplMDo1OTo0NDo2MTplZTplMTo3MDoKICAgICAgICAgICAgICAgICAgICA4MzpkNjphYzpmZTo4NDo1Mzo5MDphYjpjNTozNTphOTo4Nzo4NzphNzo3ZDoKICAgICAgICAgICAgICAgICAgICA5NjoyZTo4Njo5MzoyYzowNTplMDo1YTo1NTpjODoyZjpmZjo0MDo2OTowZjoKICAgICAgICAgICAgICAgICAgICA5NTozZTpjNTozMTplZDo2MDo2MDo3ZDpiYjowOTpjNzo2Zjo3ZToyNDphNjoKICAgICAgICAgICAgICAgICAgICA0YzpiMzo4Yzo0MTo3Yjo4MzoyNDphZjplYTphMzplYjozNTphYTpjODowMToKICAgICAgICAgICAgICAgICAgICAyMDphODpmNTowYjo0YzpmODozMjpjYzpkNzo2Yzo0ZDo3Mjo0OTphMToxMzoKICAgICAgICAgICAgICAgICAgICA0MjoxNjozMTo4MzoyODplODphNTplNzowODpmMTplODo0ZTpmNTo4MTozYToKICAgICAgICAgICAgICAgICAgICA2YTpjNTo4Mzo5ODo2MDpkODo2ZTo0MTpkYTpjZDo1NTpkNDo0Yjo4MTpkYjoKICAgICAgICAgICAgICAgICAgICA0ODoyZDpkZDpiZDpmZjo2MTpkNDowYzoyMzo2YTowYTo3YjpjZTpkMzphYToKICAgICAgICAgICAgICAgICAgICBiYjowYjo0OToxZDo3ZTo3YjphNTo3NTo3Yzo4MzoxYjpiYjpmZDpjYToxOToKICAgICAgICAgICAgICAgICAgICBhMjoxMzo3NjpjYzo1YzowYjoyNzo3Yzo1OTplYjowMjpkMjo2ODo4MzozMjoKICAgICAgICAgICAgICAgICAgICAzMDozYjpkNToyMTowNTo5Mjo1ZTozYzo0ZTo3ZDo1MTo0OToxNDpkYTpkZToKICAgICAgICAgICAgICAgICAgICAzMjpmNTpjYTplMDoyODpjMjo2Yjo3MTo5MjoxZjplZTo3ODo3ZjpmYTplMzoKICAgICAgICAgICAgICAgICAgICA0MjoxOQogICAgICAgICAgICAgICAgRXhwb25lbnQ6IDY1NTM3ICgweDEwMDAxKQogICAgICAgIFg1MDl2MyBleHRlbnNpb25zOgogICAgICAgICAgICBYNTA5djMgS2V5IFVzYWdlOiBjcml0aWNhbAogICAgICAgICAgICAgICAgQ2VydGlmaWNhdGUgU2lnbiwgQ1JMIFNpZ24KICAgICAgICAgICAgWDUwOXYzIEJhc2ljIENvbnN0cmFpbnRzOiBjcml0aWNhbAogICAgICAgICAgICAgICAgQ0E6VFJVRQogICAgICAgICAgICBYNTA5djMgU3ViamVjdCBLZXkgSWRlbnRpZmllcjogCiAgICAgICAgICAgICAgICAyODo1ODpFNjozQjpERDpBODo3ODo0QzowMTpCRTo5MzpFNjo4NTpFOTo4QTozMjo3NzozMjpDMDo3NQogICAgICAgICAgICBYNTA5djMgQXV0aG9yaXR5IEtleSBJZGVudGlmaWVyOiAKICAgICAgICAgICAgICAgIGtleWlkOjI4OjU4OkU2OjNCOkREOkE4Ojc4OjRDOjAxOkJFOjkzOkU2Ojg1OkU5OjhBOjMyOjc3OjMyOkMwOjc1CgogICAgU2lnbmF0dXJlIEFsZ29yaXRobTogc2hhMjU2V2l0aFJTQUVuY3J5cHRpb24KICAgICAgICAgNGQ6Mzk6MzA6M2Y6MjU6YzQ6YTM6NWY6ODc6YmU6OWU6OWM6NzE6MWY6YmQ6ODY6ZTU6NmY6CiAgICAgICAgIDYzOmJmOmIyOjdlOmY1OjYwOjBjOjhhOmQzOjJkOmVjOmJlOmJjOmJkOjQ1OmRmOjAwOmVlOgogICAgICAgICAzNzpkMjphZDoyNjo3NjoyZjo3NjpiYjo3ODpiNTpjMjpmMzpmODo0ZTpiMTpkNzo2Zjo5ODoKICAgICAgICAgNzM6NmY6YzU6OWY6NzQ6ZDQ6MDU6MjI6MjA6NTY6NjQ6Y2M6MjE6MDk6ZGY6NjQ6OTU6NGI6CiAgICAgICAgIGJlOjI5OjcxOmQxOjE5OjczOjU3OmRhOjI2OjJiOjI2OjI1OmIxOmEyOmVhOjU4OjJmOjgyOgogICAgICAgICAzNzplYzoxMDplZTpkZjo2NToxZTpiNDoyYToyYjo5NTo2Njo4MDoyMzo2ZTpmYTplOTo5MDoKICAgICAgICAgNTI6NmU6YzM6ZmM6ZjQ6YjE6NWQ6YmE6Mzc6ZTQ6MTk6NDQ6NzI6MjI6NWQ6MGY6ZDg6ZGQ6CiAgICAgICAgIGMwOmMxOjhkOmI3OjBjOjYyOmM3OjhjOjdlOmZiOmJhOjNlOjE4OjUyOjI3OjI1OmRjOjU2OgogICAgICAgICBiNDo0ODo5MTo4Zjo3ODoxNTo2MDozZDowNTo4MTo4NzpkMjpjOTpjMzplMzoyNDo1MTpkNjoKICAgICAgICAgNGU6ZTE6OTg6OGY6MGM6NTM6NDU6MGQ6MjY6NzU6MDQ6OGI6NTg6YzU6YjY6NzI6ZDM6NDQ6CiAgICAgICAgIDE1OjIwOjA1OmQ1OmZiOmVhOjY5OjU0OjYwOmVlOjZlOmQ1OmEyOjdiOjY2OmFiOjljOmRhOgogICAgICAgICA4OTo4NDoxMTpmNjowZTo2MDpiOTphMDpjMjo5Mzo2NzplODpiNTpjMjo5ZDo1MDplNjpjMjoKICAgICAgICAgOGQ6YTU6Nzg6YWE6NDA6MDE6M2U6ZWQ6Mjk6OWU6MjI6NzQ6NmM6ZmE6NGU6ODk6M2M6Mzk6CiAgICAgICAgIDBjOjE0OjQzOjk3OjUyOmExOmRhOjNhOmM0Ojc4Ojc0OmJlOmNhOjQyOjk0OjE2OjlmOjE2OgogICAgICAgICAyNTo0MjoxNTo0YwotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRHNqQ0NBcHFnQXdJQkFnSUJBVEFOQmdrcWhraUc5dzBCQVFzRkFEQnFNUXN3Q1FZRFZRUUdFd0pEVGpFVgpNQk1HQTFVRUNnd01TSFZoZDJWcElFTnNiM1ZrTVIwd0d3WURWUVFMREJSRGJHOTFaQ0JUWldGeVkyZ2dVMlZ5CmRtbGpaVEVsTUNNR0ExVUVBd3djUTJ4dmRXUWdVMlZoY21Ob0lGTmxjblpwWTJVZ1VtOXZkQ0JEUVRBZUZ3MHgKT1RBek1EWXdPRE14TURGYUZ3MDBPVEF6TURVd09ETXhNREZhTUdveEN6QUpCZ05WQkFZVEFrTk9NUlV3RXdZRApWUVFLREF4SWRXRjNaV2tnUTJ4dmRXUXhIVEFiQmdOVkJBc01GRU5zYjNWa0lGTmxZWEpqYUNCVFpYSjJhV05sCk1TVXdJd1lEVlFRRERCeERiRzkxWkNCVFpXRnlZMmdnVTJWeWRtbGpaU0JTYjI5MElFTkJNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEzRDdGNm16b2ZSeXVlOW5PT1ZQZDJhY1NoKzI0TzJhNApuZ254OWhhSCtNL1VmbVZhK1F2eGhERjBzY2NtcW5ZNHNDOEpxOWU4M3M4bGRtbitqd29YOTdjaUtlQlpSR0h1CjRYQ0QxcXoraEZPUXE4VTFxWWVIcDMyV0xvYVRMQVhnV2xYSUwvOUFhUStWUHNVeDdXQmdmYnNKeDI5K0pLWk0KczR4QmU0TWtyK3FqNnpXcXlBRWdxUFVMVFBneXpOZHNUWEpKb1JOQ0ZqR0RLT2lsNXdqeDZFNzFnVHBxeFlPWQpZTmh1UWRyTlZkUkxnZHRJTGQyOS8ySFVEQ05xQ252TzA2cTdDMGtkZm51bGRYeURHN3Y5eWhtaUUzYk1YQXNuCmZGbnJBdEpvZ3pJd085VWhCWkplUEU1OVVVa1UydDR5OWNyZ0tNSnJjWklmN25oLyt1TkNHUUlEQVFBQm8yTXcKWVRBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVS0ZqbQpPOTJvZUV3QnZwUG1oZW1LTW5jeXdIVXdId1lEVlIwakJCZ3dGb0FVS0ZqbU85Mm9lRXdCdnBQbWhlbUtNbmN5CndIVXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRTA1TUQ4bHhLTmZoNzZlbkhFZnZZYmxiMk8vc243MVlBeUsKMHkzc3ZyeTlSZDhBN2pmU3JTWjJMM2E3ZUxYQzgvaE9zZGR2bUhOdnhaOTAxQVVpSUZaa3pDRUozMlNWUzc0cApjZEVaYzFmYUppc21KYkdpNmxndmdqZnNFTzdmWlI2MEtpdVZab0FqYnZycGtGSnV3L3owc1YyNk4rUVpSSElpClhRL1kzY0RCamJjTVlzZU1mdnU2UGhoU0p5WGNWclJJa1k5NEZXQTlCWUdIMHNuRDR5UlIxazdobUk4TVUwVU4KSm5VRWkxakZ0bkxUUkJVZ0JkWDc2bWxVWU81dTFhSjdacXVjMm9tRUVmWU9ZTG1nd3BObjZMWENuVkRtd28ybAplS3BBQVQ3dEtaNGlkR3o2VG9rOE9Rd1VRNWRTb2RvNnhIaDB2c3BDbEJhZkZpVkNGVXc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  # - name: "env"
  #   value:
  #     ES_USER: <kubernetes_apps/data/elastic_search#ES_USER>
  #     ES_PASSWORD: <kubernetes_apps/data/elastic_search#ES_PASSWORD>   
#  - name: "env"
#    value:
#      ELASTICSEARCH_PASSWORD: "LS1CRUdJTiBgUFJJVkFURSB"
#      api_key: ui2CsdUadTiBasRJRkl9tvNnw
#  - name: "tls"
#    value:
#      ca.crt: |
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#      cert.crt: "LS0tLS1CRUdJTiBlRJRklDQVRFLS0tLS0K"
#      cert.key.filepath: "secrets.crt" # The path to file should be relative to the `values.yaml` file.

# A list of secrets and their paths to mount inside the pod
secretMounts:
  - name: elastic-cert
    secretName: logstash-logstash-elastic-cert
    path: /usr/share/logstash/es.crt
    #subPath: ca.cert
    #value: logstash-logstash-env

hostAliases: []
#- ip: "127.0.0.1"
#  hostnames:
#  - "foo.local"
#  - "bar.local"

image: "docker.elastic.co/logstash/logstash"
imageTag: "8.5.1"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

podAnnotations: {}

# additionals labels
labels: {}

logstashJavaOpts: "-Xmx1g -Xms1g"

resources:
  requests:
    cpu: "100m"
    memory: "1536Mi"
  limits:
    cpu: "1000m"
    memory: "1536Mi"

volumeClaimTemplate:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 1Gi

rbac:
  create: false
  serviceAccountAnnotations: {}
  serviceAccountName: ""
  annotations:
    {}
    #annotation1: "value1"
    #annotation2: "value2"
    #annotation3: "value3"

podSecurityPolicy:
  create: false
  name: ""
  spec:
    privileged: false
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - secret
      - configMap
      - persistentVolumeClaim

persistence:
  enabled: false
  annotations: {}

extraVolumes:
  []
  # - name: extras
  #   emptyDir: {}

extraVolumeMounts:
  []
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true

extraContainers:
  []
  # - name: do-something
  #   image: busybox
  #   command: ['do', 'something']

extraInitContainers:
  []
  # - name: do-something
  #   image: busybox
  #   command: ['do', 'something']

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

# By default this will make sure two pods don't end up on the same node
# Changing this to a region would allow you to spread pods across regions
antiAffinityTopologyKey: "kubernetes.io/hostname"

# Hard means that by default pods will only be scheduled if there are enough nodes for them
# and that they will never end up on the same node. Setting this to soft will do this "best effort"
antiAffinity: "hard"

# This is the node affinity settings as defined in
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
nodeAffinity: {}

# This is inter-pod affinity settings as defined in
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
podAffinity: {}

# The default is to deploy all pods serially. By setting this to parallel all pods are started at
# the same time when bootstrapping the cluster
podManagementPolicy: "Parallel"

httpPort: 9600

# Custom ports to add to logstash
extraPorts:
  []
  # - name: beats
  #   containerPort: 5001

updateStrategy: RollingUpdate

# This is the max unavailable setting for the pod disruption budget
# The default value of 1 will make sure that kubernetes won't allow more than 1
# of your pods to be unavailable during maintenance
maxUnavailable: 1

podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# How long to wait for logstash to stop gracefully
terminationGracePeriod: 120

# Probes
# Default probes are using `httpGet` which requires that `http.host: 0.0.0.0` is part of
# `logstash.yml`. If needed probes can be disabled or overridden using the following syntaxes:
#
# disable livenessProbe
# livenessProbe: null
#
# replace httpGet default readinessProbe by some exec probe
# readinessProbe:
#   httpGet: null
#   exec:
#     command:
#       - curl
#      - localhost:9600

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 3

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""

nodeSelector: {}
tolerations: []

nameOverride: ""
fullnameOverride: ""

lifecycle:
  {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
  # postStart:
  #   exec:
  #     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

service:
  {}
  # annotations: {}
  # type: ClusterIP
  # loadBalancerIP: ""
  # ports:
  #   - name: beats
  #     port: 5044
  #     protocol: TCP
  #     targetPort: 5044
  #   - name: http
  #     port: 8080
  #     protocol: TCP
  #     targetPort: 8080

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/tls-acme: "true"
  className: "nginx"
  pathtype: ImplementationSpecific
  hosts:
    - host: logstash-example.local
      paths:
        - path: /beats
          servicePort: 5044
        - path: /http
          servicePort: 8080
  tls: []
  #  - secretName: logstash-example-tls
  #    hosts:
  #      - logstash-example.local
